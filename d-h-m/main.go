package main

import (
	"fmt"
	"math/big"
	"math/rand"
	"time"
)

var rnd = rand.New(rand.NewSource(time.Now().UnixMilli()))
var one = big.NewInt(1)
var two = big.NewInt(2)

func isEven(n *big.Int) bool {
	return new(big.Int).Mod(n, big.NewInt(2)).Int64() == 0
}

func test(n *big.Int) bool {
	if n.Cmp(two) == 0 {
		return true
	}
	if n.Cmp(two) < 0 || isEven(n) {
		return false
	}
	d := new(big.Int)
	d.Set(n).Sub(d, one)
	println("here")
	s := 0
	for isEven(d) {
		s++
		d.Div(d, two)
	}
	a := new(big.Int)
	y := new(big.Int)
	none := new(big.Int).Sub(n, one)
	for range 25 {
		a.Rand(rnd, new(big.Int).Sub(n, big.NewInt(3))).Add(a, two)
		x := new(big.Int).Set(a).Exp(a, d, n)
		for range s {
			y.Exp(x, two, n)
			if y.Cmp(one) == 0 && x.Cmp(one) != 0 && x.Cmp(none) != 0 {
				return false
			}
			x.Set(y)
		}
		if y.Cmp(one) != 0 {
			return false
		}
	}
	return true
}

func randBig(digits int) *big.Int {

	runes := make([]rune, 0, digits)
	for range digits {
		runes = append(runes)
	}
}

func main() {
	p, _ := new(big.Int).SetString
	for {
		if test(p) {
			fmt.Print(p)
			break
		}
		p.Add(p, one)
	}
	// for i := range 100 {
	// 	if test(big.NewInt(int64(i))) {
	// 		fmt.Println(i)
	// 	}
	// }
}
